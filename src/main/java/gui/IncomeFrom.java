package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import entity.Currency;
import gui.component.NumericField;
import org.jdatepicker.JDatePicker;
import service.CalculationOfProfit;

import javax.swing.*;
import java.awt.*;
import java.time.ZoneId;
import java.util.Calendar;

public class IncomeFrom extends JFrame {
    private JPanel mainPanel;
    private JButton recalculateButton;
    private NumericField countInput;
    private JLabel dateLabel;
    private JLabel usdLabel;
    private JDatePicker dateInput;
    private JLabel profitLabel;

    public IncomeFrom() {
        recalculateButton.setEnabled(false);
        dateInput.addActionListener((e) -> {
                    if (validateDateInput((Calendar) dateInput.getFormattedTextField().getValue())) {
                        recalculateButton.setEnabled(true);
                    } else {
                        recalculateButton.setEnabled(false);
                    }
                }
        );

        recalculateButton.addActionListener((e) -> {
                    if (!countInput.getText().isEmpty()) {
                        int usdAmount = Integer.parseInt(countInput.getText());
                        Calendar dateCal = (Calendar) dateInput.getFormattedTextField().getValue();
                        double profit = CalculationOfProfit.getProfit(Currency.RUB, dateCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), usdAmount);

                        if (profit < 0) {
                            profitLabel.setForeground(Color.RED);
                        } else {
                            profitLabel.setForeground(Color.GREEN);
                        }
                        profitLabel.setText(String.format("%.2f", profit));
                    }
                }
        );
    }

    private boolean validateDateInput(Calendar inputDate) {
        if (dateInput.getFormattedTextField().getValue() == null) {
            return false;
        }
        return inputDate.compareTo(Calendar.getInstance()) <= 0;
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 2, new Insets(10, 10, 10, 10), -1, -1));
        dateInput = new JDatePicker();
        mainPanel.add(dateInput, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        dateLabel = new JLabel();
        dateLabel.setText("Date");
        mainPanel.add(dateLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        usdLabel = new JLabel();
        usdLabel.setText("Amount USD");
        mainPanel.add(usdLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        recalculateButton = new JButton();
        recalculateButton.setEnabled(true);
        recalculateButton.setText("Recalculate");
        mainPanel.add(recalculateButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        countInput = new NumericField();
        countInput.setText("");
        mainPanel.add(countInput, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(150, 5), null, null, 0, false));
        profitLabel = new JLabel();
        profitLabel.setText("0");
        mainPanel.add(profitLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
